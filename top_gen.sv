
// Generated by SandPiper(TM) 1.11-2021/01/28-beta from Redwood EDA.
// (Installed here: /usr/local/mono/sandpiper/distro.)
// Redwood EDA does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


`include "sandpiper_gen.vh"





//
// Signals declared top-level.
//

// For |calc$aa.
logic [3:0] CALC_aa_a0, //เป็นการกำหนดตัวแปลที่ชือว่า logic ขนาด 4 บิต ไว้ในตัวแปรทีเขียนตามหลังมา
            CALC_aa_a1,
            CALC_aa_a2,
            CALC_aa_a3,
            CALC_aa_a4;

// For |calc$aa_sq.
logic [7:0] CALC_aa_sq_a0,
            CALC_aa_sq_a1,
            CALC_aa_sq_a2;

// For |calc$bb.
logic [3:0] CALC_bb_a1,
            CALC_bb_a2,
            CALC_bb_a3,
            CALC_bb_a4;

// For |calc$bb_sq.
logic [7:0] CALC_bb_sq_a1,
            CALC_bb_sq_a2;

// For |calc$cc.
logic [4:0] CALC_cc_a4;

// For |calc$cc_sq.
logic [8:0] CALC_cc_sq_a2,
            CALC_cc_sq_a3,
            CALC_cc_sq_a4;

// For |calc$r_aa.
logic [31:0] CALC_r_aa_n1,
             CALC_r_aa_a0;

// For |calc$r_bb.
logic [31:0] CALC_r_bb_a0,
             CALC_r_bb_a1;



generate


   //
   // Scope: |calc
   //

      // For signal $aa, which had no assignment.
      // Assign to a random value.
      // verilator lint_save
      // verilator lint_off WIDTH
      assign CALC_aa_a0[3:0] = CALC_r_aa_a0;
      // verilator lint_restore
      always_ff @(posedge clk) CALC_aa_a1[3:0] <= CALC_aa_a0[3:0];
      always_ff @(posedge clk) CALC_aa_a2[3:0] <= CALC_aa_a1[3:0];
      always_ff @(posedge clk) CALC_aa_a3[3:0] <= CALC_aa_a2[3:0];
      always_ff @(posedge clk) CALC_aa_a4[3:0] <= CALC_aa_a3[3:0];

      // For $aa_sq.
      always_ff @(posedge clk) CALC_aa_sq_a1[7:0] <= CALC_aa_sq_a0[7:0];
      always_ff @(posedge clk) CALC_aa_sq_a2[7:0] <= CALC_aa_sq_a1[7:0];

      // For signal $bb, which had no assignment.
      // Assign to a random value.
      // verilator lint_save
      // verilator lint_off WIDTH
      assign CALC_bb_a1[3:0] = CALC_r_bb_a1;
      // verilator lint_restore
      always_ff @(posedge clk) CALC_bb_a2[3:0] <= CALC_bb_a1[3:0];
      always_ff @(posedge clk) CALC_bb_a3[3:0] <= CALC_bb_a2[3:0];
      always_ff @(posedge clk) CALC_bb_a4[3:0] <= CALC_bb_a3[3:0];

      // For $bb_sq.
      always_ff @(posedge clk) CALC_bb_sq_a2[7:0] <= CALC_bb_sq_a1[7:0];

      // For $cc_sq.
      always_ff @(posedge clk) CALC_cc_sq_a3[8:0] <= CALC_cc_sq_a2[8:0];
      always_ff @(posedge clk) CALC_cc_sq_a4[8:0] <= CALC_cc_sq_a3[8:0];

      // For random value for missing assignment.
      assign CALC_r_aa_n1[31:0] = $random() ^ {31'b0, clk};
      always_ff @(posedge clk) CALC_r_aa_a0[31:0] <= CALC_r_aa_n1[31:0];

      // For random value for missing assignment.
      assign CALC_r_bb_a0[31:0] = $random() ^ {31'b0, clk};
      always_ff @(posedge clk) CALC_r_bb_a1[31:0] <= CALC_r_bb_a0[31:0];




endgenerate




//
// Debug Signals
//

generate // เข้าสู่การ generate code

   if (1) begin : DEBUG_SIGS


      //
      // Scope: |calc
      //
      if (1) begin : \|calc 
         logic [3:0] \>@0$aa ;
         assign \>@0$aa = CALC_aa_a0;
         logic [7:0] \>@0$aa_sq ;
         assign \>@0$aa_sq = CALC_aa_sq_a0;
         logic [3:0] \>@1$bb ;
         assign \>@1$bb = CALC_bb_a1;
         logic [7:0] \>@1$bb_sq ;
         assign \>@1$bb_sq = CALC_bb_sq_a1;
         logic [4:0] \>@4$cc ;
         assign \>@4$cc = CALC_cc_a4;
         logic [8:0] \>@2$cc_sq ;
         assign \>@2$cc_sq = CALC_cc_sq_a2;
      end
   end
endgenerate

generate   // This is awkward, but we need to go into 'generate' context in the line that `includes the declarations file.
